[33mcommit 8ac93ff19301ff5eeaef2c3abb3dfb26f39f9608[m
Author: Muhammed Najeeb <muhdnajeeb3@gmail.com>
Date:   Wed Mar 19 13:44:14 2025 +0530

    ats-task

[1mdiff --git a/app/api/score-interview/route.js b/app/api/score-interview/route.js[m
[1mnew file mode 100644[m
[1mindex 0000000..db22ab7[m
[1m--- /dev/null[m
[1m+++ b/app/api/score-interview/route.js[m
[36m@@ -0,0 +1,240 @@[m
[32m+[m[32m// app/api/score-interview/route.js[m
[32m+[m[32mimport { OpenAI } from 'openai';[m
[32m+[m
[32m+[m[32m// Initialize OpenAI client with a check for the API key[m
[32m+[m[32mconst openaiApiKey = process.env.OPENAI_API_KEY;[m
[32m+[m[32mlet openai;[m
[32m+[m
[32m+[m[32mtry {[m
[32m+[m[32m  if (openaiApiKey && openaiApiKey !== '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') {[m
[32m+[m[32m    openai = new OpenAI({[m
[32m+[m[32m      apiKey: openaiApiKey,[m
[32m+[m[32m    });[m
[32m+[m[32m  } else {[m
[32m+[m[32m    console.warn('OpenAI API key is missing or using the default placeholder value');[m
[32m+[m[32m  }[m
[32m+[m[32m} catch (error) {[m
[32m+[m[32m  console.error('Error initializing OpenAI client:', error);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport async function POST(request) {[m
[32m+[m[32m  try {[m
[32m+[m[32m    console.log('Score interview API called');[m
[32m+[m[41m    [m
[32m+[m[32m    let data;[m
[32m+[m[32m    try {[m
[32m+[m[32m      data = await request.json();[m
[32m+[m[32m      console.log('Request data parsed successfully');[m
[32m+[m[32m    } catch (parseError) {[m
[32m+[m[32m      console.error('Error parsing request JSON:', parseError);[m
[32m+[m[32m      return Response.json([m
[32m+[m[32m        { error: 'Invalid JSON in request' },[m
[32m+[m[32m        { status: 400 }[m
[32m+[m[32m      );[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    const {[m[41m [m
[32m+[m[32m      interview,[m[41m [m
[32m+[m[32m      jobDescription,[m[41m [m
[32m+[m[32m      cvContent,[m[41m [m
[32m+[m[32m      responseTimeData,[m[41m [m
[32m+[m[32m      averageResponseTimeMs[m[41m [m
[32m+[m[32m    } = data;[m
[32m+[m[41m    [m
[32m+[m[32m    // Validate required fields[m
[32m+[m[32m    if (!interview) {[m
[32m+[m[32m      console.warn('Missing interview transcript in request');[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    if (!jobDescription) {[m
[32m+[m[32m      console.warn('Missing job description in request');[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    if (!responseTimeData || !averageResponseTimeMs) {[m
[32m+[m[32m      console.warn('Missing response time data in request');[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    // Convert response time from milliseconds to seconds for easier interpretation[m
[32m+[m[32m    const averageResponseTime = Math.round((averageResponseTimeMs || 0) / 1000);[m
[32m+[m[41m    [m
[32m+[m[32m    console.log('Average response time:', averageResponseTime, 'seconds');[m
[32m+[m[41m    [m
[32m+[m[32m    // If OpenAI is not initialized or we're missing data, return mock data[m
[32m+[m[32m    if (!openai || !openaiApiKey || openaiApiKey === 'your_openai_api_key_here') {[m
[32m+[m[32m      console.log('Using mock scoring data (OpenAI API key not set)');[m
[32m+[m[32m      return Response.json(getMockScore(averageResponseTime, averageResponseTimeMs));[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    try {[m
[32m+[m[32m      // Attempt to use OpenAI for scoring[m
[32m+[m[32m      console.log('Preparing to call OpenAI API for scoring...');[m
[32m+[m[41m      [m
[32m+[m[32m      // Format response time data for AI analysis[m
[32m+[m[32m      const formattedResponseTimes = Object.entries(responseTimeData || {}).map([m
[32m+[m[32m        ([questionIndex, timeMs]) => `Question ${parseInt(questionIndex) + 1}: ${Math.round(timeMs / 1000)} seconds`[m
[32m+[m[32m      ).join('\n');[m
[32m+[m[41m      [m
[32m+[m[32m      // Construct prompt for AI scoring[m
[32m+[m[32m      const prompt = `[m
[32m+[m[32m        You are an expert interviewer and recruiter. Evaluate the following interview based on the job description, candidate's CV, and the interview transcript.[m
[32m+[m[41m        [m
[32m+[m[32m        Job Description:[m
[32m+[m[32m        ${jobDescription || 'Not provided'}[m
[32m+[m[41m        [m
[32m+[m[32m        Candidate CV Summary:[m
[32m+[m[32m        ${cvContent ? (cvContent.substring(0, 1500) + '... (truncated if longer)') : 'Not provided'}[m
[32m+[m[41m        [m
[32m+[m[32m        Interview Transcript:[m
[32m+[m[32m        ${interview || 'Not provided'}[m
[32m+[m[41m        [m
[32m+[m[32m        Response Time Data:[m
[32m+[m[32m        Average response time: ${averageResponseTime} seconds[m
[32m+[m[32m        ${formattedResponseTimes || 'No detailed response time data available'}[m
[32m+[m[41m        [m
[32m+[m[32m        Please provide a comprehensive evaluation of the candidate's performance based on:[m
[32m+[m[32m        1. Technical Acumen: How well they demonstrated technical skills required for the role[m
[32m+[m[32m        2. Communication Skills: Clarity and effectiveness in conveying information[m
[32m+[m[32m        3. Problem-Solving & Adaptability: How they approached questions and provided solutions[m
[32m+[m[32m        4. Cultural Fit & Soft Skills: Interpersonal qualities relevant to the role[m
[32m+[m[32m        5. Response Timing: Considering their average response time of ${averageResponseTime} seconds (faster, high-quality responses should be scored higher)[m
[32m+[m[41m        [m
[32m+[m[32m        Return your evaluation as a JSON object with the following structure:[m
[32m+[m[32m        {[m
[32m+[m[32m          "overallScore": number (0-100),[m
[32m+[m[32m          "categories": [[m
[32m+[m[32m            {[m
[32m+[m[32m              "name": "Technical Acumen",[m
[32m+[m[32m              "score": number (0-100),[m
[32m+[m[32m              "description": "Brief evaluation of this aspect",[m
[32m+[m[32m              "color": "bg-green-500" or "bg-yellow-500" or "bg-red-500" based on score[m
[32m+[m[32m            },[m
[32m+[m[32m            // Same structure for other categories[m
[32m+[m[32m          ],[m
[32m+[m[32m          "summary": "A concise paragraph summarizing overall performance",[m
[32m+[m[32m          "strengths": ["Strength 1", "Strength 2", "Strength 3"],[m
[32m+[m[32m          "improvements": ["Area for improvement 1", "Area for improvement 2", "Area for improvement 3"],[m
[32m+[m[32m          "averageResponseTime": number (in milliseconds, use the provided value)[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        Only return the JSON object, nothing else.[m
[32m+[m[32m      `;[m
[32m+[m[41m      [m
[32m+[m[32m      // Make the actual OpenAI API call[m
[32m+[m[32m      console.log('Calling OpenAI API...');[m
[32m+[m[32m      const completion = await openai.chat.completions.create({[m
[32m+[m[32m        model: "gpt-3.5-turbo", // You can use "gpt-4" for better results if available[m
[32m+[m[32m        messages: [{ role: "user", content: prompt }],[m
[32m+[m[32m        temperature: 0.7,[m
[32m+[m[32m      });[m
[32m+[m[41m      [m
[32m+[m[32m      console.log('OpenAI API response received');[m
[32m+[m[32m      // Parse the AI's response[m
[32m+[m[32m      const content = completion.choices[0].message.content;[m
[32m+[m[32m      let scoreData;[m
[32m+[m[41m      [m
[32m+[m[32m      try {[m
[32m+[m[32m        // Extract JSON from response if needed[m
[32m+[m[32m        const jsonMatch = content.match(/\{[\s\S]*\}/);[m
[32m+[m[32m        scoreData = jsonMatch ? J